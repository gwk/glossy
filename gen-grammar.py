#!/usr/bin/env python3
# Dedicated to the public domain under CC0: https://creativecommons.org/publicdomain/zero/1.0/.

from argparse import ArgumentParser
from typing import NamedTuple
from legs.unicode.charsets import ascii_charsets
from legs.unicode.categories import unicode_categories


ascii_excluded = {
  'Ascii_Cased_Letter', # Same as Ascii_letter.
  'Ascii_Other', # Same as Ascii_control.
  'Ascii_Separator', # Same as `space`.
  'Ascii_Space_Separator', # Same as `space`.
}

unicode_excluded = {
  'Surrogate',
}

def main() -> None:
  parser = ArgumentParser()
  parser.add_argument('name')
  args = parser.parse_args()

  cat_names = sorted(c.name for c in unicode_categories if (not c.subcategories and c.name not in unicode_excluded))
  if args.name == 'ascii':
    ascii_names = [f'Ascii_{n}' for n in cat_names]
    charsets = [n for n in ascii_names if (n in ascii_charsets and n not in ascii_excluded)]
  elif args.name == 'unicode':
    charsets = cat_names
  else:
    exit(f'invalid name: {args.name}')

  print('// Dedicated to the public domain under CC0: https://creativecommons.org/publicdomain/zero/1.0/.')
  print('// Generated by github.com/gwk/legs gen-patterns.py.')
  print()
  print('newline: \\n')
  print('space: \\s+')

  for charset in sorted(charsets):
    print(f'{charset.lower()}: ${charset}+')

if __name__ == '__main__': main()
