# Dedicated to the public domain under CC0: https://creativecommons.org/publicdomain/zero/1.0/.

from distutils.command.build_scripts import build_scripts # type: ignore
from itertools import chain
from os import chmod, listdir as list_dir, walk as walk_path
from os.path import join as path_join, splitext as split_ext
from pprint import pprint
from setuptools.command.develop import develop # type: ignore
from setuptools.command.install import install # type: ignore
from sys import stderr
from typing import Any, Iterable, Iterator, List


def errSL(*items:Any) -> None:
  print(*items, file=stderr)


class BuildScripts(build_scripts): # type: ignore
  def run(self) -> None:
    super().run()
    #errSL("\nBUILD SCRIPTS")


class Develop(develop): # type: ignore

  def initialize_options(self):
    super().initialize_options()
    self.bin_dirs:List[str] = []

  def run(self) -> None:
    super().run()
    errSL("\nDEVELOP")
    gen_bins(bin_src_dirs=self.bin_dirs, bin_dst_dir=self.script_dir)


class Install(install): # type: ignore

  def initialize_options(self):
    super().initialize_options()
    self.bin_dirs:List[str] = []

  def run(self) -> None:
    super().run()
    errSL(f"\nINSTALL")
    #errSL('\ndistribution:')
    #pprint(vars(self.distribution))
    #errSL('\ncommand_obj:')
    #pprint(self.distribution.command_obj)
    gen_bins(bin_src_dirs=self.bin_dirs, bin_dst_dir=self.script_dir)


cmdclass = {
  'build_scripts': BuildScripts,
  'develop': Develop,
  'install': Install,
}


def gen_bins(bin_src_dirs:List[str], bin_dst_dir:str) -> None:
  errSL('bin_dst_dir:', bin_dst_dir)
  assert bin_dst_dir.startswith('/'), bin_dst_dir
  py_path = path_join(bin_dst_dir, 'python3')
  for src_dir in bin_src_dirs:
    for name in list_dir(src_dir):
      stem, ext = split_ext(name)
      if stem[0] in '._' or ext != '.py': continue
      path = path_join(bin_dst_dir, stem.replace('_', '-')) # Omit extension from bin name.
      module = path_join(src_dir, stem).replace('/', '.')
      errSL(f'generating script for {module}: {path}')
      with open(path, 'w') as f:
        f.write(bin_template.format(py_path=py_path, module=module))
        chmod(f.fileno(), 0o755)


bin_template = '''\
#!{py_path}
# Generated by pithy/setup.py.
from {module} import main
main()
'''


def discover_packages(package_roots:Iterable[str]) -> List[str]:
  bad_names = []
  missing_inits = []
  packages = []
  for root in package_roots:
    for dir_path, dir_names, file_names in walk_path(root):
      packages.append(dir_path)
      dir_names[:] = filter(lambda n: n != '__pycache__', dir_names)
      for name in chain(dir_names, file_names):
        if '-' in name: bad_names.append(path_join(dir_path, name))
      if '__init__.py' not in file_names:
        missing_inits.append(path_join(dir_path, '__init__.py'))

  if bad_names: errSL(f'bad module names:\n' + '\n'.join(sorted(bad_names)))
  if missing_inits: errSL(f'missing package files:\n' + '\n'.join(sorted(missing_inits)))
  if bad_names or missing_inits: exit(1)
  if not packages: exit(f'no packages found in roots: {package_roots}')
  print('packages:', *packages)
  return packages
